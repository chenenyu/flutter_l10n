import 'dart:io';

import 'package:path/path.dart';

import 'log.dart';

const String _comment = '// Generated by flutter_l10n. Do not edit it.';

// See http://en.wikipedia.org/wiki/Right-to-left
const List<String> _rtlLanguages = <String>[
  'ar', // Arabic   阿拉伯语
  'fa', // Farsi    波斯语
  'he', // Hebrew   希伯来语
  'ps', // Pashto   普什图语
  'ur', // Urdu     乌尔都语
];

StringBuffer _sb = StringBuffer();

void writeClasses(Directory outputDir, Map<File, Map<String, dynamic>> all) {
  Map<String, File> locales = {};
  File defaultLocaleArb;
  if (all.length > 1) {
    all.forEach((k, v) {
      String filename = basenameWithoutExtension(k.path);
      String locale = filename;
      if (defaultLocaleArb == null && v['@@locale'] == 'default') {
        defaultLocaleArb = k;
      } else {
        locales[locale] = k;
      }
    });
  }
  if (defaultLocaleArb == null) {
    defaultLocaleArb = locales.remove(locales.keys.first);
    if (Platform.localeName.startsWith('zh')) {
      log.warning("自动选择[${basename(defaultLocaleArb.path)}]作为默认locale。"
          "你也可以在某个arb文件中通过{\"@@locale\": \"default\"}来指定。");
    } else {
      log.warning(
          "Auto choose [${basename(defaultLocaleArb.path)}] as default locale. "
          "You can also specify it by insert a pair of key/value "
          "like {\"@@locale\": \"default\"} in some arb file.");
    }
  } else {
    log.info("Find [locale: default, arb: ${defaultLocaleArb.path}]");
  }

  _sb.clear();

  // ----- begin: S -----

  // write import
  _writeln("library s;");
  _writeln("");
  _writeln("import 'package:flutter/foundation.dart';");
  _writeln("import 'package:flutter/widgets.dart';");
  _writeln("");
  _writePart(defaultLocaleArb);
  locales.forEach((k, v) {
    log.info("Find [locale: ${k.padRight(7)}, arb: ${v.path}]");
    _writePart(v);
  });
  _writeln("");

  // write S
  _writeln(_comment);
  _writeln("class S implements WidgetsLocalizations {");
  _writeln("const S();", depth: 1);
  _writeln("");
  _writeln("@override", depth: 1);
  _writeln("TextDirection get textDirection => TextDirection.ltr;", depth: 1);
  _writeln("");
  _writeln(
      "static S of(BuildContext context) => Localizations.of<S>(context, S);",
      depth: 1);
  _writeln("");
  _writeln("static const LocalizationsDelegate<S> delegate = _Delegate();",
      depth: 1);

  _writeStrings(all[defaultLocaleArb], false);
  _writeln("}");
  _writeln("");

  // write _Delegate
  _writeln("class _Delegate extends LocalizationsDelegate<S> {");
  _writeln("const _Delegate();", depth: 1);
  _writeln("");
  _writeln("Future<S> load(Locale locale) {", depth: 1, override: true);
  if (locales.isNotEmpty) {
    _writeln(
        "String tag = locale.countryCode == null || locale.countryCode.isEmpty",
        depth: 2);
    _writeln("? locale.languageCode", depth: 4);
    _writeln(": locale.toString();", depth: 4);
    _writeln("switch (tag) {", depth: 2);
    locales.forEach((k, v) {
      _writeln("case '$k':", depth: 3);
      _writeln("return SynchronousFuture<S>(const \$$k());", depth: 4);
    });
    _writeln("}", depth: 2);
  }
  _writeln("return SynchronousFuture<S>(const S());", depth: 2);
  _writeln("}", depth: 1);
  _writeln("");
  _writeln("bool isSupported(Locale locale) => true;",
      depth: 1, override: true);
  _writeln("");
  _writeln("bool shouldReload(_Delegate old) => false;",
      depth: 1, override: true);
  _writeln("}");

  File s = File(join(outputDir.path, 's.dart'));
  s.writeAsStringSync(_sb.toString());
  // ----- finish: S -----

  // ----- begin: locale class -----
  locales.forEach((k, v) {
    _sb.clear();
    _writeln("part of s;");
    _writeln("");
    _writeln(_comment);
    _writeln("class \$$k extends S {");
    _writeln("const \$$k();", depth: 1);
    _writeln("");
    if (_rtlLanguages.contains(k)) {
      _writeln("TextDirection get textDirection => TextDirection.rtl;",
          depth: 1, override: true);
    } else {
      _writeln("TextDirection get textDirection => TextDirection.ltr;",
          depth: 1, override: true);
    }
    _writeStrings(all[v], true);
    _writeln("}");

    File locale =
        File(join(outputDir.path, basenameWithoutExtension(v.path) + '.dart'));
    locale.writeAsStringSync(_sb.toString());
  });
  // ----- finish: locale class -----
}

void _writeStrings(Map<String, dynamic> map, bool override) {
  map.forEach((key, value) {
    if (!key.startsWith('@')) {
      if (value == null) {
        _writeln("");
        _writeln("String get $key => $value;", depth: 1, override: override);
      } else if (value is String) {
        if (map.containsKey('@$key')) {
          // parameterized
          Map<String, dynamic> atKey = map['@$key'];
          if (atKey.containsKey('placeholders')) {
            var placeholders = atKey['placeholders'];
            if (placeholders != null && placeholders is Map) {
              List<String> args = [];
              placeholders.forEach((pKey, pValue) {
                if (value.contains('\${$pKey}') && pValue is Map) {
                  args.add(pKey);
                } else {
                  log.warning(
                      'placeholder[$pKey] in @$key is not Map, ignored.');
                }
              });
              StringBuffer argsBuffer = StringBuffer();
              for (int i = 0; i < args.length; i++) {
                if (i == 0) {
                  argsBuffer.write("String ${args[i]}");
                } else {
                  argsBuffer.write(", String ${args[i]}");
                }
              }

              _writeln("");
              _writeln("String $key(${argsBuffer.toString()}) {",
                  depth: 1, override: override);
              _writeln("return '$value';", depth: 2);
              _writeln("}", depth: 1);
            }
          } else {
            // normal string
            _writeln("");
            _writeln("String get $key => r'$value';",
                depth: 1, override: override);
          }
        } else {
          // normal string
          _writeln("");
          _writeln("String get $key => r'$value';",
              depth: 1, override: override);
        }
      }
    }
  });
}

void _writeln(String content, {int depth = 0, bool override = false}) {
  if (override == true) {
    _write("@override", depth: depth);
    _sb.writeln();
  }
  _write(content, depth: depth);
  _sb.writeln();
}

void _write(String content, {int depth = 0}) {
  if (depth > 0) {
    for (int i = 0; i < depth; i++) {
      _sb.write("  "); // 1 depth = 2 tabs
    }
  }
  _sb.write(content);
}

void _writePart(File file) {
  String filename = basenameWithoutExtension(file.path);
  _writeln("part '$filename.dart';");
}
